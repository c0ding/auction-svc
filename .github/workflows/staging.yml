name: auction-service

on: 
  push: 
    branches:
        - main
    # tags:
    #   - 'v*'

  # pull_request:
    

jobs:
  Check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use node version 14.17.6
        uses: actions/setup-node@v2
        with:
          node-version: 14.17.6
          registry-url: https://registry.npmjs.org
      - name: Run lint, unit tests
        run: |
          yarn
          yarn lint
          yarn test
          

  CICD:
    name: CICD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use node version 14.17.6
        uses: actions/setup-node@v2
        with:
          node-version: 14.17.6
          registry-url: https://registry.npmjs.org

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2    

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: auction-svc-v2-staging
          IMAGE_TAG: ${{ github.sha }}  
          
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: auction-svc-v2-staging
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            PARALLEL_HEIKO_CROWDLOAN_SUBQUERY_ENDPOINT=https://api.subquery.network/sq/parallel-finance/parallel-crowdloan-subql__cGFyY
            POSTGRES_DB_HOST=refund-dev.cmjwalrf1qza.us-east-2.rds.amazonaws.com
            SUBVIS_KUSAMA_ENDPOINT=http://172.99.22.119:3000
            MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }}
            MONGO_DB_HOST=172.99.20.146:27017
            SUBVIS_POLKADOT_ENDPOINT=http://172.99.20.161:3000
            POSTGRES_DB_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }}
            POSTGRES_DB_USER=refund_dev
            PRICE_ENDPOINT=https://api.coinbase.com/v2/exchange-rates
            PARALLEL_MOONBEAM_SUBQUERY_ENDPOINT=https://api.subquery.network/sq/parallel-finance/crowdloan-for-moonbeam__cGFyY
            POSTGRES_DB_NAME=polkadot_auction_dev
            MONGO_DB_AUTH_SOURCE=referral
            POSTGRES_DB_PORT=5432
            PARALLEL_POLKADOT_ENDPOINT=https://api.subquery.network/sq/parallel-finance/auction-subquery__cGFyY
            MONGO_DB_NAME=referral
            REDIS_ENDPOINT=redis-1-staging.xfcm5w.ng.0001.use2.cache.amazonaws.com:6379
            MONGO_DB_USER=referral


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: auction-service-v2-staging
          cluster: auction-service-staging
          wait-for-service-stability: true


          